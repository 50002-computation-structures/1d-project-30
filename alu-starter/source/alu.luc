module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z,
    output v,
    output n
  ) {
  adder adder;
  boolean boolean;
  shifter shifter;
  compare compare; 
  multiplier multiplier;
  divider divider;
  mux_4 mux_4_choice[16];

  var i;
  sig comp[16], arith[16];
  
  always {
    // adder
    adder.a = a;
    adder.b = b;
    adder.alufn_signal = alufn_signal;
    z = adder.z;
    v = adder.v;
    n = adder.n;

    //multiplier
    multiplier.a = a;
    multiplier.b = b;
    
    //divider
    divider.a = a;
    divider.b = b;

    //choosing between adder, multiplier or divider
    case (alufn_signal[1:0]) {
      default: arith = 0;
      b00: arith = adder.out;
      b01: arith = adder.out;
      b10: arith = multiplier.mul;
      b11: arith = divider.d;
    }
    
    // compare
    compare.z = adder.z;
    compare.v = adder.v;
    compare.n = adder.n;
    compare.alufn_signal = alufn_signal;
    comp = c{15x{b0}, compare.cmp};
    
    // boolean
    boolean.a = a;
    boolean.b = b;
    boolean.alufn_signal = alufn_signal;
    
    // shifter
    shifter.a = a;
    shifter.b = b[4:0];
    shifter.alufn_signal = alufn_signal;

    mux_4_choice.s0 = 16x{alufn_signal[4]};
    mux_4_choice.s1 = 16x{alufn_signal[5]};
    
    for(i = 0; i<16; i++){
    mux_4_choice.in[i][0] = arith[i];
    mux_4_choice.in[i][1] = boolean.bool[i];
    mux_4_choice.in[i][2] = shifter.shift[i];
    mux_4_choice.in[i][3] = comp[i];
    }
    out = mux_4_choice.out;
  }
}
