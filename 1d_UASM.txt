BEQ(R31, reset, R31)						|| reset handler 0x00000000
BEQ(R31, illop, R31)						|| illop handler  0x00000004
BEQ(R31, irq, R31)							|| irq handler    0x00000008

start: BNE(R12, player_select, R31) 		|| Check if start button is pressed, if yes branch to player_select
BEQ(R31, start, R31)						|| Loop back to start

|| PLAYER SELECT ||
player_select: BNE(R8, new_player1, R30)	|| Check if P1 button is pressed, if yes branch to new_player1
BNE(R9, new_player2, R30) 					|| Check if P2 button is pressed, if yes branch to new_player2
BNE(R10, new_player3, R30) 					|| Check if P3 button is pressed, if yes branch to new_player3
BNE(R11, new_player4, R30) 					|| Check if P4 button is pressed, if yes branch to new_player4
BEQ(R7, reset, R31) 						|| Reset registers and return to start if player count is 0
ADDC(R31, 1, R4)							|| Set location = 1
ADDC(R31, 1, R5)							|| Set round(ones) = 1
ADDC(R31, 0, R6)							|| Set round(tens) = 0
ADDC(R31, 1000, R19)						|| Set counter max value to 1000 TODO: MAYBE CHANGE VALUE
BEQ(R31, idle, R31)

new_player1: ADDC(R31, 5, R0) 				|| Populate 5 lives to Player 1
ADDC(R7, 1, R7) 							|| Increase player count by 1
JMP(R30, R31) 								|| Return to PC+4 before branching

new_player2: ADDC(R31, 5, R1)				|| Populate 5 lives to Player 2
JMP(R30, R31)								|| Return to PC+4 before branching

ADDC(R7, 1, R7)								|| Increase player count by 1
new_player3: ADDC(R31, 5, R2)				|| Populate 5 lives to Player 3
ADDC(R7, 1, R7)								|| Increase player count by 1
JMP(R30, R31)								|| Return to PC+4 before branching

new_player4: ADDC(R31, 5, R3)				|| Populate 5 lives to Player 4
ADDC(R7, 1, R7)								|| Increase player count by 1
JMP(R30, R31)								|| Return to PC+4 before branching

|| IDLE ||
idle: ADDC(R13, 1, R13)						|| add one to counter
CMPEQ(R13, R19, R20)						|| check if counter = counter max, store result in R20
BNE(R20, update_location, R30)				|| update location when R20 = 1
BEQ(R31, idle, R31)							|| Loop back to idle

|| UPDATE LOCATION ||
update_location: CMPLTC(R4, 16, R20)		|| Check if location < 16
BEQ(R20, location_1, R30)					|| Branch if location = 16
ADDC(R4, 1, R4)								|| Increase location by 1
CMPEQC(R4, 5, R20)							|| Check if location = 5
BNE(R20, location_5, R30)					|| Branch if location = 5
CMPEQC(R4, 9, R20)							|| Check if location = 9
BNE(R20, location_9, R30)					|| Branch if location = 9
CMPEQC(R4, 13, R20)							|| Check if location = 13
BNE(R20, location_13, R30)					|| Branch if location = 13
ADDC(R31, 1, R18)							|| Signify update LED location
ADDC(R31, 0, R18) 							|| Reset R18: change location to 0
ADDC(R31, 0, R13) 							|| Reset counter to 0
BEQ(R31, idle, R31) 						|| Branch back to idle

location_1: ADDC(R31, 1, R4) 				|| Set location to 1
SUBC(R19, 10, R19)							|| Reduce counter max value by 10, i.e. increase speed TODO: CHANGE VALUE
ADDC(R5, 1, R5) 							|| Increase round by 1
CMPEQC(R5, 10, R21)							|| Check if rounds is 10
BNE(R21, location_update_tens, R30)			|| Update rounds
ADDC(R31, 1, R18)							|| Signify update LED location
ADDC(R31, 0, R18) 							|| Reset R18: change location to 0
ADDC(R31, 0, R13) 							|| Reset counter to 0
BEQ(R0, idle, R31)			 				|| Branch to idle if no lives
BEQ(R14, subtract_p1_life, R31) 			|| Subtract life if no button press
ADDC(R31, 0, R14) 							|| Reset P1 button press
BEQ(R31, idle, R31)			 				|| Branch back to idle

location_update_tens: ADDC(R31, 0, R5)		|| Set rounds(ones) to 0
ADDC(R6, 1, R6)								|| Add 1 to rounds(tens)
JMP(R30)									|| Return back to next instruction before branch 

location_5: ADDC(R31, 1, R18)				|| Signify update LED location
ADDC(R31, 0, R18) 							|| Reset R18: change location to 0
ADDC(R31, 0, R13) 							|| Reset counter to 0
BEQ(R1, idle, R31)			 				|| Branch to idle if no lives
BEQ(R15, subtract_p2_life, R31) 			|| Subtract life if no button press
ADDC(R31, 0, R15) 							|| Reset P2 button press
BEQ(R31, idle, R31)			 				|| Branch back to idle

location_9: ADDC(R31, 1, R18)				|| Signify update LED location
ADDC(R31, 0, R18) 							|| Reset R18: change location to 0
ADDC(R31, 0, R13) 							|| Reset counter to 0
BEQ(R2, idle, R31)			 				|| Branch to idle if no lives
BEQ(R16, subtract_p3_life, R31) 			|| Subtract life if no button press
ADDC(R31, 0, R16) 							|| Reset P3 button press
BEQ(R31, idle, R31)			 				|| Branch back to idle

location_13: ADDC(R31, 1, R18)							|| Signify update LED location
ADDC(R31, 0, R18) 							|| Reset R18: change location to 0
ADDC(R31, 0, R13) 							|| Reset counter to 0
BEQ(R3, idle, R31)			 				|| Branch to idle if no lives
BEQ(R17, subtract_p4_life, R31)				|| Subtract life if no button press
ADDC(R31, 0, R17) 							|| Reset P4 button press
BEQ(R31, idle, R31)			 				|| Branch back to idle

|| BUTTON PRESS EVENT ||
p1_button_press: BEQ(R0, idle, R31)			|| Branch to idle if no lives
CMPEQC(R4, 4, R20)							|| Check if location = 4
BNE(R20, idle, R31)							|| Branch back to idle if button press at right time
subtract_p1_life: SUBC(R0, 1, R0)			|| Reduce life by 1
BEQ(R0, decrease_player_count, R31)			|| If P1 no lives left, branch to decrease player count
BEQ(R31, idle, R31)							|| Branch back to idle

p2_button_press: BEQ(R1, idle, R31)			|| Branch to idle if no lives
CMPEQC(R4, 8, R20)							|| Check if location = 8
BNE(R20, idle, R31)							|| Branch back to idle if button press at right time
subtract_p2_life: SUBC(R1, 1, R1)			|| Reduce life by 1
BEQ(R1, decrease_player_count, R31)			|| If P2 no lives left, branch to decrease player count
BEQ(R31, idle, R31)							|| Branch back to idle

p3_button_press: BEQ(R2, idle, R31)			|| Branch to idle if no lives
CMPEQC(R4, 12, R20)							|| Check if location = 12
BNE(R20, idle, R31)							|| Branch back to idle if button press at right time
subtract_p3_life: SUBC(R2, 1, R2)			|| Reduce life by 1
BEQ(R2, decrease_player_count, R31)			|| If P3 no lives left, branch to decrease player count
BEQ(R31, idle, R31)							|| Branch back to idle

p4_button_press: BEQ(R3, idle, R31)			|| Branch to idle if no lives
CMPEQC(R4, 16, R20)							|| Check if location = 16
BNE(R20, idle, R31)							|| Branch back to idle if button press at right time
subtract_p4_life: SUBC(R3, 1, R3)			|| Reduce life by 1
BEQ(R3, decrease_player_count, R31)			|| If P4 no lives left, branch to decrease player count
BEQ(R31, idle, R31)							|| Branch back to idle

decrease_player_count: SUBC(R7, 1, R7)		|| Reduce player count by 1
CMPLEC(R7, 1, R20)							|| Check if player count <= 1
BEQ(R20, idle, R31)							|| Branch back to idle if player count > 1
CMPEQC(R0, 0, R20)							|| Check if player 1 is dead
BEQ(R20, p1_win, R31)						|| Branch if player 1 alive
CMPEQC(R1, 0, R20)							|| Check if player 2 is dead
BEQ(R20, p2_win, R31)						|| Branch if player 2 alive
CMPEQC(R2, 0, R20)							|| Check if player 3 is dead
BEQ(R20, p3_win, R31)						|| Branch if player 3 alive
CMPEQC(R3, 0, R20)							|| Check if player 4 is dead
BEQ(R20, p4_win, R31)						|| Branch if player 4 alive
BEQ(R31, end_game_loop, R31)				|| Branch to endgame without winner

|| WINNING CONDITION ||
p1_win: ADDC(R31, 241, R4)					|| Update location to indicate p1 win
ADDC(R31, 241, R7)							|| Update player count to indicate p1 win
ADDC(R5, 0, R21)							|| Temporarily store rounds(ones) for endgame
ADDC(R6, 0, R22)							|| Temporarily store rounds(tens) for endgame
ADDC(R31, 15, R6)							|| Display P on 7-seg(tens)
ADDC(R31, 1, R5)							|| Display 1 on 7-seg(ones)
BEQ(R31, hold, R30)							|| Hold winner for some time
BEQ(R31, end_game, R31)						|| Branch to endgame

p2_win: ADDC(R31, 242, R4)					|| Update location to indicate p2 win
ADDC(R31, 242, R7)							|| Update player count to indicate p2 win
ADDC(R5, 0, R21)							|| Temporarily store rounds(ones) for endgame
ADDC(R6, 0, R22)							|| Temporarily store rounds(tens) for endgame
ADDC(R31, 15, R6)							|| Display P on 7-seg(tens)
ADDC(R31, 2, R5)							|| Display 2 on 7-seg(ones)
BEQ(R31, hold, R30)							|| Hold winner for some time
BEQ(R31, end_game, R31)						|| Branch to endgame

p3_win: ADDC(R31, 243, R4)					|| Update location to indicate p3 win
ADDC(R31, 243, R7)							|| Update player count to indicate p3 win
ADDC(R5, 0, R21)							|| Temporarily store rounds(ones) for endgame
ADDC(R6, 0, R22)							|| Temporarily store rounds(tens) for endgame
ADDC(R31, 15, R6)							|| Display P on 7-seg(tens)
ADDC(R31, 3, R5)							|| Display 3 on 7-seg(ones)
BEQ(R31, hold, R30)							|| Hold winner for some time
BEQ(R31, end_game, R31)						|| Branch to endgame

p4_win: ADDC(R31, 244, R4)					|| Update location to indicate p4 win
ADDC(R31, 244, R7)							|| Update player count to indicate p4 win
ADDC(R5, 0, R21)							|| Temporarily store rounds(ones) for endgame
ADDC(R6, 0, R22)							|| Temporarily store rounds(tens) for endgame
ADDC(R31, 15, R6)							|| Display P on 7-seg(tens)
ADDC(R31, 4, R5)							|| Display 4 on 7-seg(ones)
BEQ(R31, hold, R30)							|| Hold winner for some time
BEQ(R31, end_game, R31)						|| Branch to endgame

hold: ADDC(R31, 1000, R23)					|| Temporary timer max value TODO: CHANGE HOLD TIMER
ADDC(R24, 1, R24)							|| Temporary timer increment
CMPEQ(R23, R24, R25)						|| Compare timer with timer max value
BEQ(R25, hold, R31)							|| Branch back to hold if R23 != R24
JMP(R30)									|| Branch back to previous instruction before branch

end_game: ADDC(R21, 0, R5)					|| Display rounds(ones) for endgame
ADDC(R22, 0, R6)							|| Display rounds(tens) for endgame
end_game_loop: BNE(R12, reset, R31)			|| Wait for reset
BEQ(R31, end_game_loop, R31)				|| Loop back if no action

|| IRQ HANDLER, KERNEL PROGRAM ||
irq: ADDC(R31, 320, R20)					|| p1_button_press at h140 = d320
JMP(R20)									|| Jump to p1_button_press if p1 is pressed
ADDC(R31, 344, R20)							|| p2_button_press at h158 = d344
JMP(R20)									|| Jump to p2_button_press if p2 is pressed
ADDC(R31, 368, R20)							|| p3_button_press at h170 = d368
JMP(R20)									|| Jump to p3_button_press if p3 is pressed
ADDC(R31, 392, R20)							|| p4_button_press at h188 = d392
JMP(R20)									|| Jump to p4_button_press if p4 is pressed
ADDC(R31, 108, R20)							|| idle is at h06C = b108
JMP(R20)									|| Jump to idle

|| ILLOP HANDLER, KERNEL PROGRAM ||
illop: ADDC(R31, 108, R20)					|| idle is at h06C = d108
JMP(R20)									|| Jump back to idle

|| RESET HANDLER, KERNEL PROGRAM ||
reset: ADDC(R31, 0, R0)						|| Reset P1 lives
ADDC(R31, 0, R1)							|| Reset P2 lives
ADDC(R31, 0, R3)							|| Reset P4 lives
ADDC(R31, 0, R2)							|| Reset P3 lives
ADDC(R31, 0, R4)							|| Reset location
ADDC(R31, 0, R5)							|| Reset rounds(ones)
ADDC(R31, 0, R6)							|| Reset rounds(tens)
ADDC(R31, 0, R7)							|| Reset player count
ADDC(R31, 0, R8)							|| Reset P1 press
ADDC(R31, 0, R9)							|| Reset P2 press
ADDC(R31, 0, R10)							|| Reset P3 press
ADDC(R31, 0, R11)							|| Reset P4 press
ADDC(R31, 0, R13)							|| Reset counter
ADDC(R31, 0, R14)							|| Reset P1 record press
ADDC(R31, 0, R15)							|| Reset P2 record press
ADDC(R31, 0, R16)							|| Reset P3 record press
ADDC(R31, 0, R17)							|| Reset P4 record press
ADDC(R31, 0, R18)							|| Reset change location
ADDC(R31, 0, R19)							|| Reset counter max value
ADDC(R31, 12, R20)							|| start at h00C = d12
JMP(R20)									|| Jump back to start