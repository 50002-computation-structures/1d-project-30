module beta_cpu (
    input clk,  // clock
    input slowclk,
    input rst,
    input irq,
    input instruction[32],
    input mem_data_input[32],
    output ia[32],
    output mem_data_address[32],
    output mem_data_output[32],
    output wr,
    output debug[4][16],
    output r0_p1_live[32],
    output r1_p2_live[32],
    output r2_p3_live[32],
    output r3_p4_live[32],
    output r4_location[32],
    output r5_rounds_ones[32],
    output r6_rounds_tens[32],
    output r18_change_loc[32],
    input r8_p1_button,
    input r9_p2_button,
    input r10_p3_button,
    input r11_p4_button,
    input r8_p1_button_rise,
    input r9_p2_button_rise,
    input r10_p3_button_rise,
    input r11_p4_button_rise,
    input r12_start_button_rise

  ) {
  
  control_unit control_system(.clk(clk), .rst(rst));
  alu alu_system;
  regfile_unit regfile_system(.clk(clk), .rst(rst));
  pc_unit pc_system(.clk(clk), .rst(rst));

  sig asel_out[32];
  sig bsel_out[32];
  sig wdsel_out[32];

  always {

    // Task 12
    //***** CONTROL unit ******// 
    control_system.irq = irq;
    control_system.ia31 = pc_system.ia[31];
    control_system.opcode = instruction[31:26];
    control_system.z = regfile_system.z;
    control_system.slowclk = slowclk;
    
    //***** PC unit ******// 
    pc_system.slowclk = slowclk;
    pc_system.reg_data_1 = regfile_system.reg_data_1;
    pc_system.pcsel = control_system.pcsel;
    pc_system.id = instruction[15:0];
     
    //***** REGFILE unit *****//
    regfile_system.slowclk = slowclk;
    regfile_system.ra2sel = control_system.ra2sel;
    regfile_system.wasel = control_system.wasel;
    regfile_system.werf = control_system.werf;
    regfile_system.ra = instruction[20:16];
    regfile_system.rb = instruction[15:11];
    regfile_system.rc = instruction[25:21];
    
    //Assigning all direct connections to register data
    r0_p1_live = regfile_system.r0_data;
    r1_p2_live = regfile_system.r1_data;
    r2_p3_live = regfile_system.r2_data;
    r3_p4_live = regfile_system.r3_data;
    r4_location = regfile_system.r4_data;
    r5_rounds_ones = regfile_system.r5_data;
    r6_rounds_tens = regfile_system.r6_data;
    r18_change_loc = regfile_system.r18_data;
    regfile_system.r8_data = r8_p1_button;
    regfile_system.r9_data = r9_p2_button;
    regfile_system.r10_data = r10_p3_button;
    regfile_system.r11_data = r11_p4_button;
    
    regfile_system.r8_data_rise = r8_p1_button_rise;
    regfile_system.r9_data_rise = r9_p2_button_rise;
    regfile_system.r10_data_rise = r10_p3_button_rise;
    regfile_system.r11_data_rise = r11_p4_button_rise;
    regfile_system.r12_data_rise = r12_start_button_rise;
    
    //****** ALU + WDSEL unit *******//
    // ASEL mux
    alu_system.alufn_signal = control_system.alufn;
    case(control_system.asel){
      b0:
        asel_out = regfile_system.reg_data_1;
      b1:
        asel_out = c{0, pc_system.pc_4_sxtc[30:0]}; // supervisor bit is ignored in LDR
      default:
        asel_out = regfile_system.reg_data_1;
    }

    // BSEL mux
    case(control_system.bsel){
      b0:
        bsel_out = regfile_system.reg_data_2;
      b1:
        bsel_out = c{16x{instruction[15]}, instruction[15:0]};
        
      default:
        bsel_out = regfile_system.reg_data_2;
    }

    // WDSEL mux
    case(control_system.wdsel){
      b00:
        wdsel_out = pc_system.pc_4; // Supervisor bit is already protected in pc_unit
      b01: 
        wdsel_out = alu_system.out;
      b10:
        wdsel_out = mem_data_input;
      default:
        wdsel_out = alu_system.out;
    } 
    
    // connect asel, bsel, alu, and wdsel
    alu_system.a = asel_out;
    alu_system.b = bsel_out; 
    regfile_system.wdsel_out = wdsel_out;

    // output connections
    ia = pc_system.ia;
    mem_data_address = alu_system.out;
    mem_data_output = regfile_system.mwd;
    wr = control_system.wr;

    // debug signals
    debug[0][15:0] = pc_system.pcsel_out[15:0];
    debug[1][15:0] = asel_out[15:0];
    debug[2][15:0] = bsel_out[15:0];
    debug[3][15:0] = wdsel_out[15:0];

  }
}
